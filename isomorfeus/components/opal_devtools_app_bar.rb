class OpalDevtoolsAppBar < LucidMaterial::Component::Base
  VIEWS = %i[console object_browser]

  styles do |theme|
    { root: { flexGrow: 1 },
      title: { flexGrow: 1, marginLeft: 10 },
      button: { textTransform: :none, marginRight: theme.spacing(2) },
      appbar: { backgroundColor: '#7A8DBE', boxShadow: :none }}
  end

  event_handler :leave_inject_mode do
    app_store.inject_mode = false
  end

  event_handler :cycle_active_view do
    i = VIEWS.index(app_store.active_view)
    i += 1
    i = 0 if i >= VIEWS.size
    app_store.active_view = VIEWS[i]
  end

  event_handler :isomorfeus_force_render do
    execute_in_page <<~RUBY
      Isomorfeus.force_render
    RUBY
  end

  event_handler :inject_opal do
    inject_to_page
  end

  def is_firefox?
    `navigator.userAgent.indexOf('Firefox') >= 0`
  end

  def ruby_to_javascript(ruby_code, raw: false)
    compiled_ruby_code = Opal::Compiler.new(ruby_code, irb: true).compile
    compiled_ruby_code = compiled_ruby_code.lines[1..-1].join("\n") # remove /* Generated by Opal 1.0.0 */
    javascript = <<~JAVASCRIPT
      var opal_devtools_final_result = null;
      var caught = false;

      try {
        var opal_devtools_eval_result = #{compiled_ruby_code}
      } catch (e) {
        caught = true;
        opal_devtools_final_result = '' + (e.name ? e.name : 'error')  + ': ' + (e.message ? e.message : 'undefined');
      }
      
      if (!caught) { 
        if (typeof opal_devtools_eval_result === 'undefined') { opal_devtools_final_result = 'undefined' }
        else if (opal_devtools_eval_result === null) { opal_devtools_final_result = 'null' }
        else if (opal_devtools_eval_result == Opal.nil) { opal_devtools_final_result = 'nil' }
    JAVASCRIPT
    if raw
      javascript += <<~JAVASCRIPT
        else if (typeof opal_devtools_eval_result !== 'string' && typeof opal_devtools_eval_result.$inspect === 'function') {
          opal_devtools_final_result = opal_devtools_eval_result.$inspect(); }
        else if (typeof opal_devtools_eval_result !== 'string' && typeof opal_devtools_eval_result.$to_n === 'function') {
          opal_devtools_final_result = opal_devtools_eval_result.$to_n(); }
      JAVASCRIPT
    else
      javascript += <<~JAVASCRIPT
        else if (typeof opal_devtools_eval_result.$inspect === 'function') {
          opal_devtools_final_result = opal_devtools_eval_result.$inspect(); }
        else if (typeof opal_devtools_eval_result.$to_n === 'function') {
          opal_devtools_final_result = opal_devtools_eval_result.$to_n(); }
      JAVASCRIPT
    end
    javascript += <<~JAVASCRIPT
        else { opal_devtools_final_result = opal_devtools_eval_result }
      }
      opal_devtools_final_result;
    JAVASCRIPT
    javascript
  end

  def execute_in_page(ruby_code)
    javascript_code = ruby_to_javascript(ruby_code)

    # Property "useContentScriptContext" is unsupported by Firefox
    if app_store.inject_mode
      if is_firefox?
        %x{
          let tabId = chrome.devtools.inspectedWindow.tabId;
          global.BackgroundConnection.postMessage({ tabId: tabId, injectCode: javascript_code, completion: false })
        }
      else
        %x{
          chrome.devtools.inspectedWindow.eval(javascript_code, { useContentScriptContext: true }, function(result, exception_info) {
            if (exception_info) {
              if (exception_info.isError) { console_log(exception_info.description) }
              if (exception_info.isException) { console.log(exception_info.value) }
            }
          });
        }
      end
    else
      %x{
        chrome.devtools.inspectedWindow.eval(javascript_code, {}, function(result, exception_info) {
          if (exception_info) {
            if (exception_info.isError) { console_log(exception_info.description) }
            if (exception_info.isException) { console.log(exception_info.value) }
          }
        });
      }
    end
  end

  def inject_to_page
    %x{
      let tabId = chrome.devtools.inspectedWindow.tabId;
      chrome.devtools.inspectedWindow.eval("if (typeof Opal !== 'undefined') { Opal.RUBY_ENGINE_VERSION }", {}, function(result, exception_info) {
        if (!result) {
          global.BackgroundConnection.postMessage({ tabId: tabId, injectScript: "/devtools/panel/opal-inject.js" });
          #{app_store.inject_mode = true};
        }
      });
    }
  end

  render do
    fw = app_store.framework ? app_store.framework : nil
    DIV(key: 1, class_name: styles.root) do
      Mui.CssBaseline do
        Mui.AppBar(key: 1, class_name: styles.appbar, position: :sticky, color: :default) do
          Mui.Toolbar(key: 1, variant: :dense) do
            i = 0
            IMG(key: i += 1, src: "/icons/opal_devtools_128_t.png", height: 32, width: 32)
            Mui.Typography(key: i += 1, class_name: styles.title, variant: :subtitle2) do
              "Opal Developer Tools"
            end
            Mui.Typography(key: i += 1, class_name: styles.title, variant: :body2) do
              if app_store.inject_mode
                "Injected Opal #{RUBY_ENGINE_VERSION}"
              elsif app_store.opal_version
                "On page: Opal #{app_store.opal_version}"
              else
                "On page: no Opal"
              end
            end
            Mui.Typography(key: i += 1, class_name: styles.title, variant: :body2) do
              if fw
                "#{fw.camelize}"
              elsif app_store.opal_version
                "Unknown Framework"
              end
            end
            if fw == :isomorfeus
              Mui.Button(key: i += 1, class_name: styles.button, color: :primary, on_click: :isomorfeus_force_render) do
                "Force render!"
              end
            end
            unless app_store.opal_version
              if app_store.inject_mode
                Mui.Button(key: i += 1, class_name: styles.button, color: :primary, on_click: :leave_inject_mode) do
                  "Leave Inject Mode"
                end
              else
                Mui.Button(key: i += 1, class_name: styles.button, color: :primary, on_click: :inject_opal) do
                  "Inject Opal"
                end
              end
            end
            if app_store.devtools
              Mui.Button(key: i += 1, class_name: styles.button, color: :primary, on_click: :cycle_active_view) do
                "Showing #{app_store.active_view.split('_').map(&:camelize).join(' ')}"
              end
            end
          end
        end
      end
    end
  end
end
